# 有个小缺陷需要解决，fokr端（下游）创建分支时必须同名，否则只有创建时是复制的制定分支，后续目标会被强制改为上游默认分支
name: Test Push Directory to Branch with PR

# 这里通过主分支的 push 触发，也可以自定义其他触发方式
on:
  push:
    branches:
      - main

# ref https://docs.github.com/zh/actions/learn-github-actions/variables
env:
  dist_path: ".github"
  dist_branch: "main_-_dist_-_test" # 不能包含 / 等字符
  main_branch: "main"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 确保可以获取所有历史记录，以便合并
          token: ${{ secrets.MY_GH_TOKEN_W }} # 使用具有完全写入权限的 TOKEN（必须包含 workflows ）

      - name: Set up Git
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'

      - name: Check if dist_branch exists in the remote
        id: check-branch-exists
        run: |
          if git ls-remote --heads origin ${{ env.dist_branch }}; then
            echo "branch_exists=true" >> $GITHUB_OUTPUT
          else
            echo "branch_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Sync dist_path from main_branch to dist_branch if it exists
        if: steps.check-branch-exists.outputs.branch_exists == 'true'
        run: |
          git checkout ${{ env.main_branch }}
          git fetch origin ${{ env.dist_branch }}:${{ env.dist_branch }}
          git checkout ${{ env.dist_branch }}
          rsync -a --exclude '.git' ${{ env.dist_path }}/ .
          git add .
          git commit -m "[bot][skip actions] Sync dist_path from ${{ env.main_branch }} to${{ env.dist_branch }}" || echo "No changes to commit"


      - name: Merge changes from main_branch into dist_branch if it does not exist
        if: steps.check-branch-exists.outputs.branch_exists == 'false'
        run: |
          git checkout ${{ env.main_branch }}
          cp -r ${{ env.dist_path }} /tmp/
          ls -la /tmp/${{ env.dist_path }}
          git checkout -b ${{ env.dist_branch }}
          find . -mindepth 1 -maxdepth 1 ! -name '.git' -exec rm -rf {} +
          # 移动所有非隐藏文件和目录
          mv /tmp/${{ env.dist_path }}/* .
          # 移动所有隐藏文件和目录，但排除 . 和 ..
          shopt -s dotglob nullglob
          mv /tmp/${{ env.dist_path }}/.[!.]* .
          shopt -u dotglob nullglob
          # shopt -s dotglob 命令将开启shell选项，使得通配符 * 包含以点开头的文件和目录。
          # nullglob 选项确保当没有匹配的文件时，通配符不展开为自身。
          # 之后，我们通过 shopt -u dotglob nullglob 命令关闭这些选项，以恢复默认行为。
          ls -la
          git add .
          git commit -m "[bot][skip actions] Merge changes into ${{ env.dist_branch }}" || echo "No changes to commit"

      - name: Push changes
        id: push_changes
        uses: ad-m/github-push-action@master
        with:
          branch: ${{ env.dist_branch }}
          force: true
          # force_with_lease: true # 仅在远程分支自上次检出以来没有其他提交的情况下成功
        env:
          github_token: ${{ secrets.MY_GH_TOKEN_W }} # 使用具有完全写入权限的 TOKEN（必须包含 workflows ）

